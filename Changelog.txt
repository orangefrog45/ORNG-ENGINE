21/2/24:
-Removed dead terrain code

20/2/24:
-Shaders and framebuffers no longer tied to a library

14/2/24:
-Rendering system overhaul ------
-- Individual renderpasses made into their own classes
-- Rendergraphs that renderpasses can be attached to and share resources within
-- SceneRenderer rewritten as a utility class

13/2/25:
-Asset manager rewrite, new asset serializer class
-Started SSAO pass, a bit buggy

26/1/25:
 -Scripting environment matches engine app environment more closely
 -Singletons now work in scripts as they're pointer-based
 -SceneRenderer is no longer a singleton
 -FullScreenTexture2D

24/1/25:
-Many things

29/12/24:
-VXGI looks a lot better

28/12/24:
-Support for loading embedded textures from meshes
-Faster mesh loading, base material serialization
-Separated bloom pass from scene renderer
-Other fixes/improvements

18/12/24:
-Scripting engine overhaul -------
-- Now cmake based and compiling occurs outside editor (still hot-reloadable), allows for using external libraries
-- ImGui and opengl rendering code can now be used inside scripts
-- Scripts split into header/implementation files so script classes can be referenced and used in other scripts
-- Changed how script class properties are exposed (faster, less memory usage)
-- Scripts have access to much more of the engine

-Fast entity UUID lookups
-More general fixes/improvements

19/9/24:
-Many bugfixes, stability improvements with different hardware

6/9/24:
-Custom component registration in scenes
-General fixes/minor changes

26/7/24:
-Changed how scene component systems work so they can now be added/removed in a modular way
-Allowed disabling of specific engine modules on engine start
-More window options
-General bugfixing/small other changes

12/7/24:
-Compressed shader package file generation for loading at runtime
-Binary asset packages now support all asset types except scripts
-Added snappy submodule for compression

11/7/24:
-Single-file binary asset packages for runtime distribution, currently supports meshes, textures and audio assets

10/7/24:
-Raw texture/audio data now serialized in same binary file as metadata
-Improvements/fixes to runtime build system and file management for core assets

1/7/24:
-Some bugfixes

26/5/24:
-Scripts can now link to user-provided precompiled libraries
-Simplified how O_PROPERTYs are exposed in scripts and picked up in the preparse stage

9/5/24:
-Serialization of fog/skybox settings
-Ability to disable IBL
-Some bugfixes

29/3/24:
-Improved way engine functions are exposed to scripts to reduce boilerplate
-Scene elapsed time
-Switched to sphere mesh for material previews and added an environment map
-Rewriting and optimizing PhysicsSystem
-Further optimization to RebuildMatrix

28/3/24:
-Reworked and optimized entity references, NodeIDs removed
-Halved MeshInstanceGroups memory costs and optimized memory access, 2-3x speedup
-Optimized RebuildMatrix for transforms, ~20% speedup

21/3/24:
-Tracy profiler integration
-Optimizations to MeshInstanceGroups, tombstone transforms now used to avoid frequent re-allocations
-Optimizations to entity deserialization and prefab instantiation

19/3/24:
-EntityNodeRefs can now reference a path shared by multiple entities (same name, parent etc) but retain uniqueness using new entity NodeIDs
-EntityNodeRef bugfixes, now stable when duplicating entities
-Editor joint tooling improved
-Crash/stability fixes

18/3/24:
-Large rewrite of joint components, joint components now support any number of joints with tracked references for quick access
-Joint editor tools, joint maker and joint transform editor with gizmos
-EntityNodeRefs can now reference entities not related to eachother through parent/child relationships
-Some editor code restructuring

16/3/24:
-Physx D6 joint components with debug rendering, editor integration and serialization
-EntityNodeRef's that can be used for relatively referencing entities from paths
-Improved SceneSerializer performance and cleaned up code

9/3/24:
-Voxel GI cascade improvements, interpolation between cascade borders for smoother transitions, reuse of cascade data for smaller cascade updates,
full cascade stabilization that's fixed flickering
-Voxel GI luminance now accumulates over frames for smoother lighting on dynamic objects and less obvious voxel snapping
-Proper character controller integration (serialization, editor, debug capsule rendering)
-Updated README

3/3/24:
-Voxel GI bugfixing/debug code cleanup and cascades almost fully implemented
-More scripting utilities (exposed physx api, get entity by name)
-General refactoring/bugfixing

01/3/24:
-Started work on multiple voxel GI cascades to extend GI range
-Depth passes now account for transparency in materials (binary opacity only)
-More material parameters (disable backface culling)
-Some small tessellation tweaks

20/2/24:
-Projects can now be created in any directory
-Absolute transforms now cached

16/2/24:
-Tessellation shaders and displacement mapping support on meshes
-Switched to flags for some material bool properties
-Some safety features on asset deletion

12/6/24:
-Proper game exporting/building from editor
-Vehicle component transform sync fixes

6/2/24:
-Selected entity outline shader instead of highlight
-Removed duplicate texture asset uuid
-Script asset UI improvements
-Fixed issue with common ubo where wrong type was being converted to bytes
-Fixed material/mesh previews

5/2/24:
-Proper script binary cleanup
-General stability improvements to scripting engine
-Removed some unused headers

3/2/24:
-Fixed some issues with core engine assets not being available causing crashes
-Engine log output file

29/1/24:
-Lua dev console for editor, useful for selecting/modifying entities using conditional logic
-Rewrote some of the point/spotlight buffer code to remerge shadowed and shadowless lights and use new SSBO class
-Some bug/crash fixes

27/1/24:
-Physx overlap queries in scene
-Removed namespace collision problems from scripts, a few other improvements
-Fixed physx debug rendering causing regular meshes to stop rendering

25/1/24:
-Error handling and dead code cleanup
-Some more audio component functionality

14/1/24:
-Large voxel GI performance boost by cone tracing at half res and doing a depth-aware upsample
-Some refactoring

7/1/24:
-Improvements to anisotropic mipmapping process
-Specular cone tracing
-Performance fix to VCTGI (fixed accidentally using 4x threads for first mip)

3/1/24:
-Anisotropic mipmapping and sampling for VCTGI, currently extremely unoptimized
-General QOL keybinds/features in the editor
-Fixed material/mesh previews

29/12/23:
-Stabilized windows and docking for editor UI
-Fixed script reloading bug, made more stable in general
-Refactoring AssetManagerWindow

27/12/23:
-Banding fixed on GI
-GI voxel grid updates smoothly with camera movement

25/12/23:
-Significant performance improvements for VCT with mipmap compute shader

24/12/23:
-Voxel cone traced GI rough implementation

21/12/23:
-Audio component looping
-Script changes/compilation time optimization
-More script utilities
-General bugfixes
-Editor layer structure changes (no longer owns scene)

18/12/23:
-Support for flexible and performant GPU particle systems using ParticleBufferComponents with layer integration
-Dynamic particle emission from shaders using append buffer with EmitParticleDirect/Append functions

11/12/23:
-Fixed prefabs not serializing children
-Fixed collision callbacks
-Scene graph entity node drag multi-selection with middle mouse
-Fixed undo/redo not accounting for child entities
-Fixed RemoveInstance not dequeueing duplicate instances flagged for update
-Fixed PathEqualTo

10/2/23:
-Mesh transform buffer bug where transforms would get skipped fixed
-Shadow acne fix on spotlights
-Fixed billboard lighting/normal mapping
-Fixed material previews
-Fixed meshinstancegroup bug where instances would not be dequeued from updating after being removed
-Fixed alpha-tested materials' previews not rendering correctly due to transparency composite shader not accounting for different texture sizes

7/12//23:
-More particle parameters - acceleration, scale/colour/opacity over time
-Animated spritesheet/flipbook support on materials
-Interpolation graphs that work on CPU and GPU

5/12/23:
-Billboards supported for particle emitters
-Rewrote auto-instancing system to be a bit more general and use new buffer classes
-General refactoring

3/12/23:
-Particle emitter serialization
-More parameters for particle emitters, custom mesh/material support
-Particle transform memory optimizations (switched to quats for rotation)
-Random rotations for particles

1/12/23:
-Better random velocity vector generation for particles using IQ's random function
-Some parameters added to particle emitters

29/11/23:
-A start on GPU particle system and particle emitter components
-Some utilities like ShaderVariants
-Refactoring and bugfixing

22/11/23:
-Physx material assets, component implementation
-Editor UI changes
-Terrain quadtree fixes to improve chunk seams


20/11/23:
-ACES tonemapping
-Fixed asset manager attempting to load both release and debug precompiled scripts

19/11/23:
-Rough implementation of physx 5.1+ vehicles (currently 4-wheeled car support), will rewrite once engine supports skeletal animation

16/11/23:
-Multi-selection (selection by dragging a box over the screen) in editor
-Ctrl-z (undo) and ctrl-shift-z (redo) support in editor
-General settings menu in editor
-Fixed script member parsing when members are initialized with curly braces or not initialized

14/11/23:
-Fixed terrain AABB generation causing improper culling

13/11/23:
-Physx trigger support and script callbacks
-Physx debug rendering fixes/changes
-Fixed gizmo's not being rendered correctly due to being drawn in the background
-Added base sphere asset
-Fixed input considering pressed keys "held" before the next frame
-Auto script replacement when a script asset is deleted and entities are using it

12/11/23:
-Scripting overhaul, system now more similar to unity/unreal, state management far easier
-Runtime fixes

11/11/23:
-Added runtime exe
-Physics system now updates before scripts

10/11/23:
-Debug menu improvements with ImPlot
-Made debug menu available in core engine

9/11/23:
-Transparent material support, still need to support opacity maps
-Core assets no longer shown in editor
-Fixed material deletion

7/11/23:
-Shader hot reloading

6/11/23:
-Converted engine shaders to use the include system, smaller size and more readable
-Slightly better error messages for shaders

3/11/23:
-C++ style include system for shaders

2/11/23:
-Made a proper GameLayer and exe (currently editor with fractal renderpass) for the fractal game and moved the code out of the base editor
-"Renderpass intercept" system where additional rendering code can be executed between different stages of the core RenderScene pipeline, required if multiple layers need to render parts of the scene

21/10/23:
-Scripts debuggable in debug mode
-Script recompilation no longer unnecessarily happens on editor restart
-Old script PDB files cleaned up properly
-Moved all base assets into AssetManager
-Fixed bug where textures would not bind properly after scene reload
-Fixed input state bug caused by not disregarding GLFW_REPEAT events
-Fixed audio not playing

20/10/23:
-Overhauled input system, better state tracking
-Improved entity node UI selecting controls
-UI improvements, more stable scene display panel
-Audio components pre-allocated on correct side of boundary

15/10/23:
-Fog improvements
-GetComponent added to scripts
-Audio component improvements (editor ui and functionality)
-Bugfixes

12/10/23:
-More bugfixes to transforms and gizmos
-Material naming conflict during serialization fixed
-Rotation error in transform hierarchies fixed, unoptimized

10/10/23:
-More audio component settings
-Fixed another audio asset serialization bug
-Audio component serialization
-Few other small bugfixes

9/10/23:
-Lowered terrain memory cost significantly and improved shading
-Fixed terrain generation, LOD seams still present 
-Fixed mesh deletion crash caused by attempting to render a deleted preview image with imgui

2/10/23:
-Fixed audio asset .osound file serialization duplication bug

1/10/23:
-Another fix to transforms (rotations behaviour wrong)

28/9/23:
-Transform inheritance math fixed, setabsoluteX functions fixed
-LookAt transform fixed

27/9/23:
-Fixed terrible ecs bug, have to do all component memory allocation in engine instead of scripts - fixes a really common crash occuring after recompiling scripts

24/9/23:
-Made exiting simulation mode in the editor much faster (was reloading the env map each time previously)
-Fixed large texture memory leak not freeing stbi data (forgot to correct changes made ages ago), this has fixed a lot of bugs I didn't understand (was just running out of memory)
-Fixed some bugs with filepath serialization and absolute/relative issues
-Fixed VAO memory leak

22/9/23:
-In-engine rendering of physx debug graphics
-Rewrite of VAO's and buffers, more generalized
-Physx visual debugger connections established
-Removed event queueing system (misunderstood dll execution environments)
-Start on physx joint components
-Switched from uint_8t* to std::any for event data payloads


19/9/23:
-Fullscreen scene panel during simulation mode (done for simplifying mouse transformations etc with scripts)
-Fixed script event queue not being cleared each frame
-Audio fixes

17/9/23:
-Exposed raycasting to scripts
-Mouse input stuff added in scripts
-Fixed script filepaths not being preserved if not loaded correctly causing them to disconnect from entities
-Fixed deleteentity script crash where entities could be pushed into the deletion queue multiple times
-Fixed total elapsed time calculation
-Fixed material deletion crash where imgui would try to render the deleted preview image
-Fixed script reconnection after reload bug where all script components would be reconnected even if they didn't have it
-Fixed material preview crash caused by trying to render a material preview for a material that could have been deleted

16/9/23:
-Switched to vcpkg for managing physx

15/9/23:
-Data components
-Spotlight + pointlight shadow system overhaul, no shadow limit and functional shadow toggles
-Mesh manager now updates last to catch all transform events (was causing stuttery movement before)
-Fixed material window closing bug
-Spotlight direction vec now from transform

14/9/23:
-Intellisense improvements/fixes for scripts, entity/prefab data written to header file to be used by them
-Proper scene display panel added (not just imgui drawn over a fullscreen display)
-Scene display panel drag/drop with meshes/prefabs
-Further work on prefabs

12/9/23:
-Pause button for editor simulation mode
-Slightly improved entity node drag/drop + select controls
-More script stability
-Build fixes for CMake

11/9/23:
-Project file structure validation and repair system
-Script loading/execution stability improvements
-Cmake assimp include fix
-Fixed script reloading
-Overhaul of asset manager, full switch to binary asset serialization and code improvements
-Further general asset/project management improvements
-Editor cam rotation improvements (no more sticking at high/low y target values)

9/9/23:
-Mesh default material system removed - just considering meshes pure vertex data now
-Editor mesh asset management fixes and improvements

8/9/23:
-Safer script execution - deletion queue and try-catches


7/9/23:
-Fixed physx collision callback system - nothing to do with fmod but urgently needed doing, memory corruption and crashes

2/9/23:
-Asset manager window class and ExtraUI created, editorlayer refactoring
-Physics comp editor added back bodytype changing
-Asset management changes - more stable file management
-Basic audio integration - needs a lot more work but positional works now


31/8/23:
-Material drag and drop fix


30/8/23:
-Physics collision callbacks in scripts
-MeshInstanceGroup improper sorting fixed
-/DEBUG linker flag removed when compiling scripts in release 
-Merged physics components back into one class - prevents having to cast everywhere

29/08/23:
-Play/simulate button in editor that saves previous state
-Serialization/project validation changes
-Scripts connected to physics
-Raycasting

26/8/23:
-Basic C++ scripting engine, runtime compilation/connecting of external c++ scripts to entities (currently only msvc supported)
-Split physicscomponent into PhysicsComponentStatic and PhysicsComponentDynamic
-Runtime reloading of scripts
-UI integration with scripts
-UI improvements, error window
-Env map diffuse prefilter serialization for faster loading


22/8/23:
-Concept of projects and project management added
-3D Mesh/material asset previews in editor
-Large UI changes in editor
-Asset management improved, serialized/clone asset files kept with project files
-Fixed some entity/transform hierarchy bugs
-Mesh asset binary serialization
-Some vol. fog changes/fixes


16/8/23:
-Some work on binary asset serialization
-Async mesh/texture loading
-Asset management stuff in its own singleton class, moved out of Scene
-ImGui drag and drop for materials/textures instead of scuffed system


12/8/23:
-Vertex data format changes - loose floats used instead of vectors
-Transform hierarchies fixed
-Improved editor cam controls
-Removed useless editor cam class

9/8/23:
-PhysX GPU support janky fix just copying pre-compiled dlls
-Fixed entity parent/child relationships
-UI improvements for hierarchies, scrolling bug on entities with many children fixed.


7/8/23:
-CMake build updated and fixed
-Some scene loading bugs fixed and stability improvements


5/8/23:
-Events system changes
-Multiple active scene support
-Optimizations to physics/transform events
-Portal shader for fun


30/7/23:
-Editor bugfixing
-Assets now compiled into the core engine lib instead of needing to be in every project using it


28/7/23:
-ECS Overhaul - started using entt and event-driven architecture
-Made core engine API a library and seperated editor application from it
-Events system converted to using entt
-Fixed spotlight/pointlight shadows
-PCSS for directional lights
-Bloom post processing added - http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare
-Emissive materials and texture support
-Stability improvements, a few crashes (especially on window close) fixed


14/7/23:
-Blurring/upsampling fog passes converted to compute shaders, ~0.5ms performance gain
-Proper windows file explorer integration
-Skybox/env map editor (for now just an HDR loader)
-Editor bugfixing, more QOL features
-Smoother shadows with rotated poisson disk sampling
-GPU/CPU lifetime profiling timer macros


08/7/23:
-Huge fog improvements, depth-aware upsampling and blurring, decent performance
-Improvements on serialization, almost all data saved (some stuff that's about to change not included)
-GPU-driven physics (actually a bit slower, but needed for dynamic triangle meshes)
-Triangle mesh support, static and dynamic
-Some multi-entity selection utils
-Physics component refactoring (had no idea PxRigidActor existed)


04/7/23:
-Basic scene serialization/deserialization (not fully complete)
-Removed material buffer system, replaced with much better method
-More deletion/creation functionality - still not complete
-Entity duplication keybind
-Proper env map loader class seperate from skybox


27/6/23:
-Nvidia physx and basic physics components implemented (still needs work)
-Small changes to ECS and transform callbacks
-Textures automatically use mipmaps
-Further UI improvements
-Texture tiling control in materials
-General bugfixing and refactoring


24/6/23:
-Large UI changes
-Fixed some transform bugs
-Material bugs fixed
-Light buffer updates slightly changed - for now just update each frame
-Changes to diffuse prefilter system so env map data is saved to disk


22/6/23:
-Image based lighting with environment map loading and prefiltering
-Component managers (systems)
-Transform inheritance
-Material system rewrites to make swapping materials easier
-Some texture rewrites
-General refactoring


13/6/23:
-Moved from blinn-phong shading to PBR pipeline
-Parallax mapping with displacement maps
-Safe automatic texture loading
-Material editing UI improvements, basic drag and drop
-Removed stacking components for entities, space only given to active components, none reserved
-Material id's swapped for pointers in mesh comps and instance groups
-Other minor refactoring


10/6/23:
-Custom editor camera 
-Camera component added
-Window resize events with framebuffer connections
-Frame timestep fixed
-Automatic event listener unregistration
-Refactoring


7/6/23:
-Engine events system
-Basic terrain configuration and regeneration
-Gizmos for transforming meshes using ImGuizmo
-Scene renderer
-Basic material editing
-Basic HDR implemented (no luminance maps yet)
-Atmospheric scattering in fog
-All lights work with volumetric fog
-Fog optimizations (looks terrible currently, need depth-aware upsampling)
-Fixed spotlight shadows
-Modified render pipeline to support post-lighting passes using a shared depth buffer
-Shared framebuffer textures
-Switched to column-major matrix standard
-Adjustments to debug editor UI
-General refactoring


17/5/23:
-Volumetric fog
-Fog controls
-Made textures and framebuffers work more nicely together
-Switched from GLCall to more modern debug message callback for opengl debugging.
-Switched to deferred rendering pipeline
-Modular materials, can be changed on meshes now
-More transform buffer optimizations, moved to ssbos, ~5x increased performance on many moving objects
-Fixed dreadful activateprogram function which was re-linking the program every time it was called (400 to 1400fps in some areas)


24/4/23:
-Basic Entity editor
-Very underdeveloped asset viewer/editor
-ECS improvements
-Entity selection through mouse picking
-Native scripting
-Rewrote shader, shaderlibrary, framebuffer and framebufferlibrary apis to make them actually usable
-AABB generation for meshes
-Texture generation more customizable
-Lighting shader optimizations (reduced branching)
-Optimizations to transform buffer code, moving components much faster
-CMake integration
-Linked most dependencies as submodules, every library also now static
-Reduced build times with precompiled headers
-Other things


9/4/23:
-Terrain texture blending
-Quadtree based dynamic terrain LOD
-Asynchronous terrain chunk loading system
-Frustum culling for terrain
-Optimizations to reduce build times
-Fixed lighting bug caused by calculating lighting only in tangent space without normal maps provided


01/4/23:
-Very basic layer system added (currently only an editor layer)


30/3/23:
-Fog method (https://cs.gmu.edu/~jchen/cs662/fog.pdf) implemented
-Normal mapping added
-Multiple camera support
-Better logging using spdlog
-Further improvements/changes to codebase structure


23/3/23:
-Procedural terrain generation using perlin noise
-General refactoring, structural changes to codebase
-Timestep has more functionality, supports different units
-Switched ECS back to pointer system, easier to work with


26/3/23:
-Basic non-procedural terrain generation, a few modifiable parameters
-Added auto-generated mipmaps to textures (this also fixes some black texture bugs)


25/3/23:
-Fixed shadow flickering bug when directional light was moved caused by updating the depth map too late


22/3/23:
Fixed diffuse colour bug caused by reading the specular colour instead of the diffuse colour from materials


19/3/23:
-Split spotlight and directional light textures and framebuffers for more performant resolutions for different light types
-PCF shadow softening
-Added scene debug data GUI window
-Fixed memory crash caused by referencing deleted mesh components


18/3/23:
-Changed ECS to using contiguous memory for performance, this makes creating entities slower but rendering them faster
-SceneEntity class that all scene components derive from to allow entities to have structures with eachother
-Mesh entities with the same mesh data can now properly support different shader types
-ID system for entities
-Lowered resolution of depth maps for spotlights


14/3/23:
-Shadow support for spotlights

13/3/23:
-Reflective shader that reflects skybox
-Skybox optimizations
-More lighting model fixes/changes, reflected light always less than light received, shadow bias depends on slope


12/3/23:
-Directional light controls
-Depth map viewing window
-Changes to shadow map biasing (still not perfect)
-WorldTransform2D added to support 2D entities and windows


11/3/23:
-Changes to Blinn-Phong lighting algorithm to fix ambient lighting issues
-Rough shadow mapping implemented
-Display now drawn to as a textured quad
-Shaders restructured to remove repeated code


9/3/23:
-Switched to UBOs for lights (~30% increased perfomance)
-Switched to UBOs for view/projection matrices.
-Scene entities can now be edited before being loaded


7/3/23:
-Added spotlights with a visualization cone angled with the cameras target vector (needs some work)
-Fixed world matrix bug caused by incorrect multiplication order
-Fixed flat colour shader WVP uniform bug caused by WVP being taken from light instead of its mesh visual


5/3/23:
-Added fixed distance limits for point lights
-Improved multi-shader support for scenes
-Removed render functionality from BasicMesh class
-Added draw call functions to Renderer 
-Fixed black texture issue caused by bad materials
